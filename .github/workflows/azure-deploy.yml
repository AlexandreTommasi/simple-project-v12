name: Deploy to Azure Web App

on:
  workflow_dispatch:
  # Push trigger comentado para evitar deploy automático no primeiro commit
  # Descomente as linhas abaixo se quiser deploy automático em futuros pushes:
  # push:
  #   branches:
  #     - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Detect project structure and build
        run: |
          # Check if it's a monorepo with frontend/backend
          if [ -d "frontend" ] && [ -d "backend" ]; then
            echo "Detected frontend/backend structure"
            
            # Build frontend
            if [ -f "frontend/package.json" ]; then
              echo "Building frontend..."
              cd frontend
              npm install
              npm run build --if-present
              cd ..
            fi
            
            # Build backend
            if [ -f "backend/package.json" ]; then
              echo "Building backend..."
              cd backend
              npm install
              npm run build --if-present
              cd ..
            fi
            
            # Copy frontend build to backend public folder
            if [ -d "frontend/dist" ] || [ -d "frontend/build" ]; then
              echo "Copying frontend build to backend..."
              mkdir -p backend/public
              cp -r frontend/dist/* backend/public/ 2>/dev/null || cp -r frontend/build/* backend/public/ 2>/dev/null || true
            fi
            
            # Create web.config for Azure
            cat > backend/web.config << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <system.webServer>
    <webSocket enabled="false" />
    <handlers>
      <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
    </handlers>
    <rewrite>
      <rules>
        <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
          <match url="^server.js/debug[/]?" />
        </rule>
        <rule name="StaticContent">
          <action type="Rewrite" url="public{REQUEST_URI}"/>
        </rule>
        <rule name="DynamicContent">
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
          </conditions>
          <action type="Rewrite" url="server.js"/>
        </rule>
      </rules>
    </rewrite>
    <security>
      <requestFiltering>
        <hiddenSegments>
          <remove segment="bin"/>
        </hiddenSegments>
      </requestFiltering>
    </security>
    <httpErrors existingResponse="PassThrough" />
    <iisnode node_env="production" nodeProcessCountPerApplication="1" maxConcurrentRequestsPerProcess="1024" maxNamedPipeConnectionRetry="100" namedPipeConnectionRetryDelay="250" maxNamedPipeConnectionPoolSize="512" maxNamedPipePooledConnectionAge="30000" asyncCompletionThreadCount="0" initialRequestBufferSize="4096" maxRequestBufferSize="65536" watchedFiles="*.js;iisnode.yml" uncFileChangesPollingInterval="5000" gracefulShutdownTimeout="60000" loggingEnabled="true" logDirectory="iisnode" debuggingEnabled="true" debugHeaderEnabled="false" debuggerPortRange="5058-6058" debuggerPathSegment="debug" maxLogFileSizeInKB="128" maxTotalLogFileSizeInKB="1024" maxLogFiles="20" devErrorsEnabled="true" flushResponse="false" enableXFF="false" promoteServerVars="" configOverrides="iisnode.yml" />
  </system.webServer>
</configuration>
EOF
            
            # Create iisnode.yml
            cat > backend/iisnode.yml << 'EOF'
node_env: production
loggingEnabled: true
logDirectory: iisnode
EOF
            
            # Ensure package.json has proper start script
            if [ -f "backend/package.json" ]; then
              echo "Checking package.json start script..."
              cd backend
              if ! grep -q '"start":' package.json; then
                echo "Adding start script to package.json"
                node -e "const pkg=require('./package.json'); pkg.scripts=pkg.scripts||{}; pkg.scripts.start='node server.js'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));"
              fi
              cd ..
            fi
            
            # Package backend for deployment
            cd backend
          elif [ -f "package.json" ]; then
            # Single project structure
            echo "Detected single project structure"
            npm install
            npm run build --if-present
            npm run test --if-present -- --passWithNoTests
          else
            echo "No package.json found in expected locations"
            exit 1
          fi

      - name: Zip artifact for deployment
        run: |
          # Check if we have frontend/backend structure
          if [ -d "backend" ]; then
            echo "Creating deployment package from backend folder"
            cd backend
            zip -r ../release.zip . -x "node_modules/*" ".git/*"
          else
            echo "Creating deployment package from root"
            zip -r release.zip . -x "node_modules/*" ".git/*"
          fi

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'expandev-01'
          package: .
          startup-command: 'npm start'